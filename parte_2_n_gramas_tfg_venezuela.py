# -*- coding: utf-8 -*-
"""PARTE 2: N-GRAMAS - TFG_Venezuela.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xJpFM6du-ObkgXflHQSL13go0JBXE3be
"""

# Esta es la Parte 2 del código principal del TFG: N- Gramas.
# Esta sección complementa la Parte 1, donde se realiza el preprocesamiento de datos y en la Parte 3, el modelado de tópicos.
# Ambas partes han sido separadas por motivos de tamaño al subir el proyecto a GitHub, pero forman parte de un único flujo de trabajo.
# Es fundamental ejecutar previamente la Parte 1 en el mismo entorno para garantizar que todas las librerías estén cargadas y los datos correctamente preparados.
# También existe una versión unificada del proyecto en formato .py, que incluye todo el proceso completo.

# 2. Análisis Descriptivo de N-Gramas

#Se lee el csv con los datos limpios obtenidos anteriormente y se filtra por la columna "lemmas" y se imprimen
df_analisis = pd.read_csv('Venezuela_limpia.csv')
dft= df_analisis['lemmas']
dft = [x for x in dft if str(x) != 'nan']
print(dft)

#Se calcula el Valor de TF-IDF de los unigramas y se imprimen
tfIdfVectorizer=TfidfVectorizer(use_idf=True, ngram_range=(1,1))
tfIdf = tfIdfVectorizer.fit_transform(dft)
names=tfIdfVectorizer.get_feature_names_out()
freqs = tfIdf.sum(axis=0).A1
result= dict(zip(names, freqs))
print(result)

#Se muestran los 30 unigramas con mayor valor TF-IDF
from operator import itemgetter
i = 0
results_sorted=sorted(result.items(), key = itemgetter(1), reverse = True)
for key, value in results_sorted:
    i += 1
    if i == 31:
      break
    print(key, value)

#Se pintan los 30 unigramas con más TF-IDF
df_results=pd.DataFrame.from_dict(results_sorted).head(30)
plt.rcParams.update({'font.size': 20})
plt.figure(figsize=(15,7))
plt.bar(df_results[0],df_results[1])
plt.xticks(rotation=90)
plt.ylabel('TF-IDF Score')
plt.title('Unigramas más relevantes del corpus')

#Se realiza la misma operación con los bigramas y trigramas

#Se calcula el Valor de TF-IDF de los bigramas
tfIdfVectorizer_bi=TfidfVectorizer(use_idf=True, ngram_range=(2,2))
tfIdf_bi = tfIdfVectorizer_bi.fit_transform(dft)
names_bi=tfIdfVectorizer_bi.get_feature_names_out()
freqs_bi = tfIdf_bi.sum(axis=0).A1
result_bi= dict(zip(names_bi, freqs_bi))

#Se muestran los 30 bigramas con mayor valor TF-IDF
from operator import itemgetter
i = 0
results_sorted=sorted(result_bi.items(), key = itemgetter(1), reverse = True)
for key, value in results_sorted:
    i += 1
    if i == 31:
      break
    print(key, value)

#Se pintan los 30 bigramas con más TF-IDF
results_sorted_bi=sorted(result_bi.items(), key = itemgetter(1), reverse = True)
df_results_bi=pd.DataFrame.from_dict(results_sorted_bi).head(30)
plt.rcParams.update({'font.size': 20})
plt.figure(figsize=(15,7))
plt.bar(df_results_bi[0],df_results_bi[1])
plt.xticks(rotation=90)
plt.ylabel('TF-IDF Score')
plt.title('Bigramas más relevantes del corpus')

#Trigramas
#Se calcula el Valor de TF-IDF de los trigramas
tfIdfVectorizer_tri=TfidfVectorizer(use_idf=True, ngram_range=(3,3))
tfIdf_tri = tfIdfVectorizer_tri.fit_transform(dft)
names_tri= tfIdfVectorizer_tri.get_feature_names_out()
freqs_tri = tfIdf_tri.sum(axis=0).A1
result_tri = dict(zip(names_tri, freqs_tri))

#Se muestran los 30 trigramas con mayor valor TF-IDF
from operator import itemgetter
i = 0
results_sorted=sorted(result_tri.items(), key = itemgetter(1), reverse = True)
for key, value in results_sorted:
    i += 1
    if i == 31:
      break
    print(key, value)

#Se pintan los 30 trigramas con más TF-IDF
results_sorted_tri=sorted(result_tri.items(), key = itemgetter(1), reverse = True)
df_results_tri=pd.DataFrame.from_dict(results_sorted_tri).head(30)
plt.rcParams.update({'font.size': 20})
plt.figure(figsize=(15,7))
plt.bar(df_results_tri[0],df_results_tri[1])
plt.xticks(rotation=90)
plt.ylabel('TF-IDF Score')
plt.title('Trigramas más relevantes del corpus')